import "./index.less";
import { option } from "./type";
export declare class imageCropper {
    private option;
    private width;
    private height;
    private eleType;
    private fileSrc;
    private previewList;
    private $inputBox;
    private $cropperViewBox;
    private $cropperContainer;
    private $cropperinputBox;
    private $cropperCropBox;
    private $cropperCanvasBox;
    private $cropperDragBox;
    private $cropperFaceBox;
    private $cropperLineE;
    private $cropperPointE;
    private $cropperPointNe;
    private $cropperLineN;
    private $cropperPointN;
    private $cropperPointNw;
    private $cropperLineW;
    private $cropperPointW;
    private $cropperPointSw;
    private $cropperLineS;
    private $cropperPointS;
    private $cropperPointSe;
    private cropperScale;
    private dragDom;
    private dragPosition;
    private zoom;
    private zoomNumber;
    private imgSize;
    private canvasSize;
    private initCanvasSize;
    private cropperSize;
    private previewObj;
    magnifyFn: () => void;
    shrinkFn: () => void;
    moveLeftFn: () => void;
    moveRightFn: () => void;
    moveUpFn: () => void;
    moveDownFn: () => void;
    constructor(optionObj: option);
    private initOption;
    private initFn;
    private getBase64;
    changeImg(src: string): void;
    private getContainerStyle;
    private getDom;
    private addInputEvent;
    private inputFn;
    private previewImg;
    private addPreviewImg;
    private updatePreviewImgSize;
    private getPreviewImgSize;
    private computeCanvasSize;
    private computeCropperSize;
    private addImage;
    private getCanvasSize;
    private getCropperSize;
    private getCropperImgSize;
    private addCropperEvent;
    private mousewheelFn;
    private imgZoomFn;
    private mousemoveTypeFn;
    private moveReturn;
    private cropperRight;
    private cropperDown;
    private cropperUp;
    private cropperLeft;
    private cropperRightDown;
    private cropperLeftDown;
    private cropperRightUp;
    private cropperLeftUp;
    private cropperTransform;
    private mousemoveImgFn;
    private mousemoveCropperFn;
    private stateCallback;
    getCropSize(fn?: any): void;
}
